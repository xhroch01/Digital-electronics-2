
04-interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000286  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cca  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f9  00000000  00000000  0000108e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ee  00000000  00000000  00001787  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00001b78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040e  00000000  00000000  00001c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000150  00000000  00000000  00002086  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000021d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_13>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 65 00 	call	0xca	; 0xca <main>
  78:	0c 94 41 01 	jmp	0x282	; 0x282 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;								// Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  80:	fc 01       	movw	r30, r24
  82:	40 81       	ld	r20, Z
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <GPIO_config_output+0xe>
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <GPIO_config_output+0xa>
  92:	24 2b       	or	r18, r20
  94:	20 83       	st	Z, r18
  96:	08 95       	ret

00000098 <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  98:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1 << pin_num);
  9a:	90 81       	ld	r25, Z
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <GPIO_write_low+0xe>
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <GPIO_write_low+0xa>
  aa:	20 95       	com	r18
  ac:	29 23       	and	r18, r25
  ae:	20 83       	st	Z, r18
  b0:	08 95       	ret

000000b2 <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num) //sk
{
	*reg_name |= (1<<pin_num);   //sk
  b2:	fc 01       	movw	r30, r24
  b4:	40 81       	ld	r20, Z
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <GPIO_write_high+0xe>
  bc:	22 0f       	add	r18, r18
  be:	33 1f       	adc	r19, r19
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <GPIO_write_high+0xa>
  c4:	24 2b       	or	r18, r20
  c6:	20 83       	st	Z, r18
  c8:	08 95       	ret

000000ca <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configuration of LED(s) at port B
    GPIO_config_output(&DDRB, LED_D1);
  ca:	65 e0       	ldi	r22, 0x05	; 5
  cc:	84 e2       	ldi	r24, 0x24	; 36
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
    GPIO_write_low(&PORTB, LED_D1);
  d4:	65 e0       	ldi	r22, 0x05	; 5
  d6:	85 e2       	ldi	r24, 0x25	; 37
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>

    // Configuration of 16-bit Timer/Counter1 for LED blinking
    // Set the overflow prescaler to 262 ms and enable interrupt
    TIM1_overflow_262ms();
  de:	e1 e8       	ldi	r30, 0x81	; 129
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	8b 7f       	andi	r24, 0xFB	; 251
  e6:	80 83       	st	Z, r24
  e8:	80 81       	ld	r24, Z
  ea:	83 60       	ori	r24, 0x03	; 3
  ec:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
  ee:	ef e6       	ldi	r30, 0x6F	; 111
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
  f8:	78 94       	sei
  fa:	ff cf       	rjmp	.-2      	; 0xfa <main+0x30>

000000fc <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Toggle D1 LED on Multi-function shield.
 **********************************************************************/

ISR(TIMER1_OVF_vect)
{
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	2f 93       	push	r18
 108:	3f 93       	push	r19
 10a:	4f 93       	push	r20
 10c:	5f 93       	push	r21
 10e:	6f 93       	push	r22
 110:	7f 93       	push	r23
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
 116:	af 93       	push	r26
 118:	bf 93       	push	r27
 11a:	ef 93       	push	r30
 11c:	ff 93       	push	r31
      
    GPIO_write_low(&PORTB, LED_D1);     //sk
 11e:	65 e0       	ldi	r22, 0x05	; 5
 120:	85 e2       	ldi	r24, 0x25	; 37
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
    GPIO_write_high(&PORTB, LED_D2);
 128:	64 e0       	ldi	r22, 0x04	; 4
 12a:	85 e2       	ldi	r24, 0x25	; 37
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>
    GPIO_write_high(&PORTB, LED_D3);
 132:	63 e0       	ldi	r22, 0x03	; 3
 134:	85 e2       	ldi	r24, 0x25	; 37
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>
    GPIO_write_high(&PORTB, LED_D4);
 13c:	62 e0       	ldi	r22, 0x02	; 2
 13e:	85 e2       	ldi	r24, 0x25	; 37
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>

    GPIO_write_low(&PORTB, LED_D2);     //sk     
 146:	64 e0       	ldi	r22, 0x04	; 4
 148:	85 e2       	ldi	r24, 0x25	; 37
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
    GPIO_write_high(&PORTB, LED_D1);
 150:	65 e0       	ldi	r22, 0x05	; 5
 152:	85 e2       	ldi	r24, 0x25	; 37
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>
    GPIO_write_high(&PORTB, LED_D3);
 15a:	63 e0       	ldi	r22, 0x03	; 3
 15c:	85 e2       	ldi	r24, 0x25	; 37
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>
    GPIO_write_high(&PORTB, LED_D4);
 164:	62 e0       	ldi	r22, 0x02	; 2
 166:	85 e2       	ldi	r24, 0x25	; 37
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>

    GPIO_write_low(&PORTB, LED_D3);     //sk
 16e:	63 e0       	ldi	r22, 0x03	; 3
 170:	85 e2       	ldi	r24, 0x25	; 37
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
    GPIO_write_high(&PORTB, LED_D1);
 178:	65 e0       	ldi	r22, 0x05	; 5
 17a:	85 e2       	ldi	r24, 0x25	; 37
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>
    GPIO_write_high(&PORTB, LED_D2);
 182:	64 e0       	ldi	r22, 0x04	; 4
 184:	85 e2       	ldi	r24, 0x25	; 37
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>
    GPIO_write_high(&PORTB, LED_D4);
 18c:	62 e0       	ldi	r22, 0x02	; 2
 18e:	85 e2       	ldi	r24, 0x25	; 37
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>

    GPIO_write_low(&PORTB, LED_D4);     //sk
 196:	62 e0       	ldi	r22, 0x02	; 2
 198:	85 e2       	ldi	r24, 0x25	; 37
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
    GPIO_write_high(&PORTB, LED_D1);
 1a0:	65 e0       	ldi	r22, 0x05	; 5
 1a2:	85 e2       	ldi	r24, 0x25	; 37
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>
    GPIO_write_high(&PORTB, LED_D2);
 1aa:	64 e0       	ldi	r22, 0x04	; 4
 1ac:	85 e2       	ldi	r24, 0x25	; 37
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>
    GPIO_write_high(&PORTB, LED_D3);
 1b4:	63 e0       	ldi	r22, 0x03	; 3
 1b6:	85 e2       	ldi	r24, 0x25	; 37
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>
    
    GPIO_write_high(&PORTB, LED_D1);     //sk
 1be:	65 e0       	ldi	r22, 0x05	; 5
 1c0:	85 e2       	ldi	r24, 0x25	; 37
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>
    GPIO_write_low(&PORTB, LED_D2);
 1c8:	64 e0       	ldi	r22, 0x04	; 4
 1ca:	85 e2       	ldi	r24, 0x25	; 37
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
    GPIO_write_low(&PORTB, LED_D3);
 1d2:	63 e0       	ldi	r22, 0x03	; 3
 1d4:	85 e2       	ldi	r24, 0x25	; 37
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
    GPIO_write_low(&PORTB, LED_D4);
 1dc:	62 e0       	ldi	r22, 0x02	; 2
 1de:	85 e2       	ldi	r24, 0x25	; 37
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>

    GPIO_write_high(&PORTB, LED_D2);     //sk
 1e6:	64 e0       	ldi	r22, 0x04	; 4
 1e8:	85 e2       	ldi	r24, 0x25	; 37
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>
    GPIO_write_low(&PORTB, LED_D1);
 1f0:	65 e0       	ldi	r22, 0x05	; 5
 1f2:	85 e2       	ldi	r24, 0x25	; 37
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
    GPIO_write_low(&PORTB, LED_D3);
 1fa:	63 e0       	ldi	r22, 0x03	; 3
 1fc:	85 e2       	ldi	r24, 0x25	; 37
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
    GPIO_write_low(&PORTB, LED_D4);
 204:	62 e0       	ldi	r22, 0x02	; 2
 206:	85 e2       	ldi	r24, 0x25	; 37
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>

    GPIO_write_high(&PORTB, LED_D3);     //sk
 20e:	63 e0       	ldi	r22, 0x03	; 3
 210:	85 e2       	ldi	r24, 0x25	; 37
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>
    GPIO_write_low(&PORTB, LED_D1);
 218:	65 e0       	ldi	r22, 0x05	; 5
 21a:	85 e2       	ldi	r24, 0x25	; 37
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
    GPIO_write_low(&PORTB, LED_D2);
 222:	64 e0       	ldi	r22, 0x04	; 4
 224:	85 e2       	ldi	r24, 0x25	; 37
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
    GPIO_write_low(&PORTB, LED_D4);
 22c:	62 e0       	ldi	r22, 0x02	; 2
 22e:	85 e2       	ldi	r24, 0x25	; 37
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>

    GPIO_write_high(&PORTB, LED_D4);     //sk
 236:	62 e0       	ldi	r22, 0x02	; 2
 238:	85 e2       	ldi	r24, 0x25	; 37
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>
    GPIO_write_low(&PORTB, LED_D1);
 240:	65 e0       	ldi	r22, 0x05	; 5
 242:	85 e2       	ldi	r24, 0x25	; 37
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
    GPIO_write_low(&PORTB, LED_D2);
 24a:	64 e0       	ldi	r22, 0x04	; 4
 24c:	85 e2       	ldi	r24, 0x25	; 37
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
    GPIO_write_low(&PORTB, LED_D3);
 254:	63 e0       	ldi	r22, 0x03	; 3
 256:	85 e2       	ldi	r24, 0x25	; 37
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>


    sei();
 25e:	78 94       	sei
      }
  }
    
    

}
 260:	ff 91       	pop	r31
 262:	ef 91       	pop	r30
 264:	bf 91       	pop	r27
 266:	af 91       	pop	r26
 268:	9f 91       	pop	r25
 26a:	8f 91       	pop	r24
 26c:	7f 91       	pop	r23
 26e:	6f 91       	pop	r22
 270:	5f 91       	pop	r21
 272:	4f 91       	pop	r20
 274:	3f 91       	pop	r19
 276:	2f 91       	pop	r18
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <_exit>:
 282:	f8 94       	cli

00000284 <__stop_program>:
 284:	ff cf       	rjmp	.-2      	; 0x284 <__stop_program>
