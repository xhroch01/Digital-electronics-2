
LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008e7  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000692  00000000  00000000  00000b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000364  00000000  00000000  000011d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001538  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b4  00000000  00000000  0000158c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b0  00000000  00000000  00001940  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001af0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  78:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <carka>:
	// Will never reach this
	return 0;
}
void carka()
{
	PORTB = PORTB ^ (1<<LED_GREEN);
  80:	95 b1       	in	r25, 0x05	; 5
  82:	80 e2       	ldi	r24, 0x20	; 32
  84:	89 27       	eor	r24, r25
  86:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	8b e4       	ldi	r24, 0x4B	; 75
  8c:	9d e1       	ldi	r25, 0x1D	; 29
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	80 40       	sbci	r24, 0x00	; 0
  92:	90 40       	sbci	r25, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <carka+0xe>
  96:	00 c0       	rjmp	.+0      	; 0x98 <carka+0x18>
  98:	00 00       	nop
	_delay_ms(LONG_DELAY);
	PORTB = PORTB & ~(1<<LED_GREEN);
  9a:	85 b1       	in	r24, 0x05	; 5
  9c:	8f 7d       	andi	r24, 0xDF	; 223
  9e:	85 b9       	out	0x05, r24	; 5
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	8b e4       	ldi	r24, 0x4B	; 75
  a4:	9d e1       	ldi	r25, 0x1D	; 29
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <carka+0x26>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <carka+0x30>
  b0:	00 00       	nop
  b2:	08 95       	ret

000000b4 <tecka>:
	_delay_ms(LONG_DELAY);
}
void tecka()
{
	PORTB = PORTB ^ (1<<LED_GREEN);
  b4:	95 b1       	in	r25, 0x05	; 5
  b6:	80 e2       	ldi	r24, 0x20	; 32
  b8:	89 27       	eor	r24, r25
  ba:	85 b9       	out	0x05, r24	; 5
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	83 ec       	ldi	r24, 0xC3	; 195
  c0:	99 e0       	ldi	r25, 0x09	; 9
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <tecka+0xe>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <tecka+0x18>
  cc:	00 00       	nop
	_delay_ms(SHORT_DELAY);
	PORTB = PORTB & ~(1<<LED_GREEN);
  ce:	85 b1       	in	r24, 0x05	; 5
  d0:	8f 7d       	andi	r24, 0xDF	; 223
  d2:	85 b9       	out	0x05, r24	; 5
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	8b e4       	ldi	r24, 0x4B	; 75
  d8:	9d e1       	ldi	r25, 0x1D	; 29
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <tecka+0x26>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <tecka+0x30>
  e4:	00 00       	nop
  e6:	08 95       	ret

000000e8 <mezera>:
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	83 ed       	ldi	r24, 0xD3	; 211
  ec:	90 e3       	ldi	r25, 0x30	; 48
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <mezera+0x6>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <mezera+0x10>
  f8:	00 00       	nop
  fa:	08 95       	ret

000000fc <main>:

int main(void)
{
	// Set pin as output in Data Direction Register
	// DDRB = DDRB or 0010 0000
	DDRB = DDRB | (1<<LED_GREEN);
  fc:	84 b1       	in	r24, 0x04	; 4
  fe:	80 62       	ori	r24, 0x20	; 32
 100:	84 b9       	out	0x04, r24	; 4

	// Set pin LOW in Data Register (LED off)
	// PORTB = PORTB and 1101 1111
	PORTB = PORTB & ~(1<<LED_GREEN);
 102:	85 b1       	in	r24, 0x05	; 5
 104:	8f 7d       	andi	r24, 0xDF	; 223
 106:	85 b9       	out	0x05, r24	; 5
 108:	2f ef       	ldi	r18, 0xFF	; 255
 10a:	83 ec       	ldi	r24, 0xC3	; 195
 10c:	99 e0       	ldi	r25, 0x09	; 9
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x12>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x1c>
 118:	00 00       	nop
	{
		// Pause several milliseconds
		_delay_ms(SHORT_DELAY);
		//BRNO

		carka();
 11a:	0e 94 40 00 	call	0x80	; 0x80 <carka>
		tecka();
 11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <tecka>
		tecka();
 122:	0e 94 5a 00 	call	0xb4	; 0xb4 <tecka>
		tecka();
 126:	0e 94 5a 00 	call	0xb4	; 0xb4 <tecka>
		
		mezera();
 12a:	0e 94 74 00 	call	0xe8	; 0xe8 <mezera>
		
		tecka();
 12e:	0e 94 5a 00 	call	0xb4	; 0xb4 <tecka>
		carka();
 132:	0e 94 40 00 	call	0x80	; 0x80 <carka>
		tecka();
 136:	0e 94 5a 00 	call	0xb4	; 0xb4 <tecka>
		
		mezera();
 13a:	0e 94 74 00 	call	0xe8	; 0xe8 <mezera>
		
		carka();
 13e:	0e 94 40 00 	call	0x80	; 0x80 <carka>
		tecka();
 142:	0e 94 5a 00 	call	0xb4	; 0xb4 <tecka>
		
		mezera();
 146:	0e 94 74 00 	call	0xe8	; 0xe8 <mezera>
		
		carka();
 14a:	0e 94 40 00 	call	0x80	; 0x80 <carka>
		carka();
 14e:	0e 94 40 00 	call	0x80	; 0x80 <carka>
		carka();
 152:	0e 94 40 00 	call	0x80	; 0x80 <carka>
 156:	d8 cf       	rjmp	.-80     	; 0x108 <main+0xc>

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
